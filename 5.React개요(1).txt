React를 왜 사용하는가??
-많이 쓰임, 인기가 많음
-Component를 관리하는데 도움이 됨

-------------------------------------
DOM :  문서 그 자체
Component : 그 안에 큰 카테고리 들 - function으로 작성가능
-------------------------------------

Props의 역할 :  지하철처럼 Props(변경사항도 넘겨줌)가 모든 Component를 지나 데이터 state를 저장하고 이를 사용자에게 알려줌
>>특징 : READ ONLY
>>단점 : 하나의 구간에서 바뀐 데이터를 사용자에게 알려주면 모든 곳을 지나와야하기 때문에 시간이 많이 걸림.
         예) 100번째 글에 댓글을 달았는데 새로고침이 되면서 다시 1번째 글로 스크롤이 올라감.

>>그래서 바뀐 구간부터 차례로 들러서 사용자에게 바뀐 정보를 보여줌
State Change -> Compute Diff -> Re-render

##장점##
#상호작용이 많은 UI
#효율적인 (reaction되는)컴포넌트 갱신 및 렌더링
#스스로 상태관리하는 컴포넌트
#DOM과 별개로 상태관리
#앱 안 데이터 손쉽게 전달

@@사람이 하는 것@@
@전체 컴포넌트의 구조를 먼저 기획한다.
@각 컴포넌트가 가지는 상태와 변화를 생각한다.
@컴포넌트를 만든다.
@컴포넌트에 HTML비슷한 것(JSX)을 통해 구조를 만든다.
@CSS를 통해 꾸민다
@여러 React의 함수를 통해 기능을 추가한다. 

-----------------------------------------------
NPM
:npm (노드 패키지 매니저/Node Package Manager)은 자바스크립트 프로그래밍 언어를 위한 패키지 관리자이다.

특징
1.개별 프로젝트 폴더에 따로 설치 가능
(pip같은 경우는 모든곳에 깔려서 어디서든 사용가능)
2.전체적으로 사용하도록 성치도 가능(-g옵션 붙여야 함, global)
3.사용은 주로 npm으로 시작
4.npx : 따로 전역 모듈 설치 없이 있터넷에서 가져와 사용할 수 있게 해주는 툴
